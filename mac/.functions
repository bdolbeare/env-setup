#!/bin/sh

COLOR_RED=`tput setaf 1`
COLOR_GREEN=`tput setaf 2`
COLOR_YELLOW=`tput setaf 3`
COLOR_RESET=`tput sgr0`	

#
# Common functions
#
function echoinred() { echoincolor ${COLOR_RED} $@ ; }
function echoingreen() { echoincolor ${COLOR_GREEN} $@ ; }
function echoinyellow() { echoincolor ${COLOR_YELLOW} $@ ; }
function echoincolor () {
	local COLOR=$1
	shift
	echo ${COLOR}${@}${COLOR_RESET}
}


#
# Continue function which prompts the user to see if they want to continue.  
#
# inputs: 
#     $1 => the prompt to present to the user
#
# returns:
#     0 if the user wants to continue
#     1 if the user DOES NOT want to continue
#
# example usage: 
# 
#     if asktocontinue "Do you want to run taskX?"; then echo "run taskX"; fi
# 
function asktocontinue {
	local msg=${1}
	local waitingforanswer=true
	local result=0
	while ${waitingforanswer}; do
		read -p "${COLOR_YELLOW}${msg} ('y/Y' to continue, 'n/N' to cancel)${COLOR_RESET} " -n 1 answer
		case ${answer} in
			[Yy] ) waitingforanswer=false; result=0; break;;
			[Nn] ) waitingforanswer=false; result=1; break;;
			*    ) echo ""; echo "${COLOR_RED}Please answer either yes (y/Y) or no (n/N).${COLOR_RESET}";;
		esac
	done
	echo
	return $result
}


# Convert the parameters or STDIN to lowercase.
function lc {
	if [ $# -eq 0 ]; then
		tr '[:upper:]' '[:lower:]';
	else
		tr '[:upper:]' '[:lower:]' <<< "$@";
	fi;
}

# Convert the parameters or STDIN to uppercase.
function uc {
	if [ $# -eq 0 ]; then
		tr '[:lower:]' '[:upper:]';
	else
		tr '[:lower:]' '[:upper:]' <<< "$@";
	fi;
}

# Try to make sense of the date. It supports everything GNU date knows how to
# parse, as well as UNIX timestamps. It formats the given date using the
# default GNU date format, which you can override using "--format='%x %y %z'.
#
# Examples of input and output:
#
#   $ whenis 1234567890            # UNIX timestamps
#   Sat Feb 14 00:31:30 CET 2009
#
#   $ whenis +1 year -3 months     # relative dates
#   Fri Jul 20 21:51:27 CEST 2012
#
#   $ whenis 2011-10-09 08:07:06   # MySQL DATETIME strings
#   Sun Oct  9 08:07:06 CEST 2011
#
#   $ whenis 1979-10-14T12:00:00.001-04:00 # HTML5 global date and time
#   Sun Oct 14 17:00:00 CET 1979
#
#   $ TZ=America/Vancouver whenis # Current time in Vancouver
#   Thu Oct 20 13:04:20 PDT 2011
#
# For more info, check out http://kak.be/gnudateformats.
function whenis {
	local error='Unable to parse that using http://kak.be/gnudateformats';
	# Default GNU date format as seen in date.c from GNU coreutils.
	local format='%a %b %e %H:%M:%S %Z %Y';
	if [[ "$1" =~ ^--format= ]]; then
		format="${1#--format=}";
		shift;
	fi;
	# Concatenate all arguments as one string specifying the date.
	local date="$*";
	if [[ "$date"  =~ ^[[:space:]]*$ ]]; then
		date='now';
	elif [[ "$date"  =~ ^[0-9]{13}$ ]]; then
		# Cut the microseconds part.
		date="${date:0:10}";
	fi;
	if [[ "$OSTYPE" =~ ^darwin ]]; then
		# Use PHP on OS X, where "date" is not GNU's.
		php -r '
			error_reporting(-1);
			$format = $_SERVER["argv"][1];
			$date = $_SERVER["argv"][2];
			if (!is_numeric($date)) {
				$date = strtotime($date);
				if ($date === false) {
					fputs(STDERR, $_SERVER["argv"][3] . PHP_EOL);
					exit(1);
				}
			}
			echo strftime($format, $date), PHP_EOL;
		' -- "$format" "$date" "$error";
	else
		# Use GNU date in all other situations.
		[[ "$date" =~ ^[0-9]+$ ]] && date="@$date";
		date -d "$date" +"$format";
	fi;
}

# Processes
# -----------------------------------------------------------------------------
# Show a one-line process tree of the given process, defaulting to the current
# shell. By specifying this as a function instead of a separate script, we
# avoid the extra shell process.
function process-tree {
	pid="${1:-$$}";
	orig_pid="$pid";
	local commands=();
	while [ "$pid" != "$ppid" ]; do
		# Read the parent's process ID and the current process's command line.
		{
			read -d ' ' ppid;
			read command;
		} < <(ps c -p "$pid" -o ppid= -o command= | sed 's/^ *//');
		# XXX This does not quite work yet with screen on OS x. Find out why.
		# echo "PID: $pid // PPID: $ppid // CMD: $command" 1>&2;
		# Stop when we have reached the first process, or an sshd/login process.
		if [ -z "$ppid" -o "$ppid" -eq 0 -o "$ppid" -eq 1 -o "$command" = 'login' -o "$command" = 'sshd' ]; then
			# Include screen/xterm as the "root" process.
			if [ "$command" = 'screen' -o "$command" = 'xterm' ]; then
				commands=("$command" "${commands[@]}");
			fi;
			break;
		fi;
		# Insert the command in the front of the process array.
		commands=("$command" "${commands[@]}");
		# Prepare for the next iteration.
		pid="$ppid";
		ppid=;
	done;
	# Hide the first bash process.
	set -- "${commands[@]}";
	if [ "$1" = '-bash' -o "$1" = 'bash' ]; then
		shift;
		commands=("$@");
	fi;
	# Print the tree with the specified separator.
	separator='â†’';
	output="$(IFS="$separator"; echo "${commands[*]}")";
	echo "${output//$separator/ $separator }";
}

# Show the uptime (including load) and the top 10 processes by CPU usage.
function top10 {
	uptime;
	if [[ "$OSTYPE" =~ ^darwin ]]; then
		ps waux -r;
	else
		ps waux --sort='-%cpu';
	fi | head -n 11 | cut -c "1-${COLUMNS:-80}";
}
